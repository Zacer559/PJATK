						########################################
						########### HTTP PROXY SERVER ##########
						########################################
						################ AUTOR #################
						########### DOMINIK KRAWIEC ############
						############### S16941 #################
						########################################
What is it?
		HTTP PROXY SERVER is a simple proxy server written in Java which support many requests and clients at the same moment (Multithreading). 

	
	
	
	
Implementation details:

	Main.java
		public static void main(String[] args)
			The Main class is simple class in which program is checking how many argument were passed. 
				If none           - program is using default (8085) port to create server.
				If one            - this is our port on which proxy server will be waiting for client.
				If more than one  - program thows too many arguments exception
			After that we are creating new object "myProxy" of type "Proxy" with our port number as an argument. (LINE 28)
			Next program is calling a method "listen()" from class "Proxy" which is listening for any new clients. (LINE 38)

		In other words its responsible for taking an argument, creating "Proxy" object with that argument and starting,
		the listing.



	Proxy.java implements Runnable
		Declaration of:
			- ArrayList of Threads "servicingThreads" (Its responsible for holding all running threads)
			- ServerSocker "serverSocket" (Its server socket to which clients are connecting)
			- boolean "ruuning" (Its responsible for holding and information that server is running or not)

		Proxy(int port) -- constructor
			Signs empty ArrayList to "servicingThreads"
			Starts new Thread which is declared also in "Proxy" class. (LINE: )
			Tries to sign new ServerSocket on port passed as an argument of the constructor to our ealier declared serverSocket.
			If something goes wrong program throws one of three possible exceptions:
				- SocketException to indicate that there is an error creating or accessing a Socket.
				- SocketTimeoutException to indicate that connection between client and server is too long.
				- IOException to indicate that there is Input/Output problem.
			Sets running variable to true and print information in the terminal that the server is wainting on "port" from constructor.
			
		In other words its just a constructor which is creating object of type "Proxy" which creates serverSocket
		on port given as an argument, and running thread which is responsible for interpreting "close" command in the terminal. 
			
		public void listen()
			While our running variable is true it tries: 
				- Waits for any new connection from client to "serverSocket".
				- When the connection is made then its creating new Socket "socket" which is holding information about connection.
				- Creates new Thread "thread" which as argument is taking new object of type "Request2" which takes as argument "socket" variable.
				- Adds  "thread" to "servicingThreads" ArrayList
				- Starts "thread"
			If there was a problem it throws one of two exception:
				- SocketException to indicate that there is an error creating or accessing a Socket.
				- IOException to indicate that there is Input/Output problem.
				
		In other words its just a listner which is wainting for connection from the client. If the connection is established,
		then it is creating thread (Request2 thread) and adding them to our ArrayList of threads. 
		
		public void closeServer()
			When method is called then it prints in the terminal information about that server is closing.
			Sets "running" variable to false. Then tries to:
				- check in the loop that all threads from "servicingThreads" ArrayList are dead. If any is not then: 
					- it shows in the terminal that thread isAlive.
					- it kill that thread.
					- it inform in the terminal that thread has been killed.
			If there was same error it thows exception:
				- InterruptedException when Thread was interrupted(was sleeping or waiting) before it was killed.
			Then it tries to:
				- Print the information about that "serverSocket" is going to be terminated.
				- Closes the "serverSocket"
			If there was any problem then it throws:
				- Exception which means that there was a problem with closing "serverSocket"
			
		In other words it is responsible for closing the server. Its checking that all threads
		are dead if not its killing them and after that close serverSocket.
			
		public void run() 
				It creates a new Scanner "scanner" and String "command"
				While "running" it waits for the next command given by the user in the terminal.
				If command equals close then it is setting "running" variable to false and calls closeServer() method. (LINE:
				It closes the scanner.
			
		In other words it is responsible for calling closeServer() method after "close" command written by the user in the terminal.
			
			
	Request2.java
		Declaration of:
			- Socket "clientSocket" (Its responsible for holding information about connection)
			- BufferedReader "proxyToClientBr" (Its responsible for reading request from the user)
			- BufferedWriter "proxyToClientBw" (Its resposible for passing information from to client)
			
		public Request2(Socket clientSocket) -- constructor 
			Saving "clientSocket" from an argument to the variable in the class.
			Then tries to :
				- create "proxyToClientBr" which is BufferedReader from input stream from client 
				- create "proxyToClientBw" which is BufferedWriter from output stream to client.
			If something goes wrong it throws:
				- IOException which means that there was a problem with creating "ProxyToClientBr" or "ProxyToClientBw"
				
		In other words it is responsible for creating object of type Request2. It saves "clientSocket" as class variable and 
		creates BufferedReader and BufferedWriter.
			
		public void run() 
			It creates a String "requestString" then it tries to:
				- assings to this string value of request from client using proxyToClientBr
			If there was any problem it throws:
				-IOException which means that there was a problem with reading request from client.
				It shows in the terminal that there was an error reading request from the client. After that it "return;" 
				which means that we are not doing anything more in that thread so the thread is closing.
			If our "request" is not empty:
				Then program converts our request to URL format which is saved in "urlString". It means that we are cutting "request" 
				to get the URL adress from the string. For example (request = "GET http://example.com/ HTTP/1.1") so after execution
				urlString = "http://example.com/"
				request = "GET"
				If program checks that our request equals "GET" (every http request beggins with "GET",
				so at this moment we are filtering all internet traffic to HTTP protocol only) then 
					- It informs in the terminal that we are sending "GET" request to the server (for example http://example.com/)
					- It is calling a method sendToClient(urlString) (LINE: )
					
		In other words it is responsible for taking request from client and converting them to "request" and "urlString".
		After that it calls a method SendToClient(String urlString)
					
		private void sendToClient(String urlString) 
			It tries to :
				- Creates URL "remoteURL" from urlString given as an argument of the method.
				- Creates  HttpURLConnection "proxyToServerCon" which is connection to "remoteURL"
				- Then it tries create :
					- Creates new byte array "buffer" of size 4096 and int "read" 
					- Then it tries with every iteration of do while loop (read >= 0) 
						- Assign to "read" the amount of bytes which have to be send to the client using "proxyToServerCon" connection. Where maximum value is 4096 bytes(size of buffer array),
						but if there is more data to send, it sends it in next loop iteration.
						- If read > 0 (There is still data to send) then it:
							- Sends all data to client using clientSocket.getOutputStream().write(buffer, 0, read)
							  where "buffer" is our byte array in which we are storing the data,
							  0 is the index on our "buffer" from which it should start writing data, 
							  read is amount of bytes to send.
							- If in our "proxyToServerCon" connection are no bytes available to write then:
								- It is flushing (clearing) data in "clientSocket.getOutputStream()" (clearing "buffer")
					If there was problem with the loop it throws:
						- SocketTimeoutException which means that there was a problem with sending the data to the client.
					Then if the "proxyToClientBw" is not empty then it is closing it.
				If there was any other problem it throws:
					- Exception which means that there could be a problem with converting "urlString" to URL "remoteURL" or
					problem with opening connection to our "remoteURL" or
					problem with closing "proxyToClientBw"
					
		In other words it is responsible for establishing connection with server and sending all data from server to the client.



Requirements:
	To compile:
		JDK 1.8
	To run: 
		JRE 1.8


					
How to compile?
	WINDOWS 10
		Via commandline
			1. Turn on the cmd.
			2. cd to the folder in which is this file. (If you do not know what is cd command and how to use it go to https://ss64.com/nt/cd.html)
			3. Write in cmd:
				cd Source 
			4. Specify your path to javac.exe file (jdk installation folder) 
			5. Write in cmd:
				 /path/to/jdk/javac.exe Main.java 
				 /path/to/jdk/javac.exe Request2.java 
				 /path/to/jdk/javac.exe Proxy.java
			6. Write in cmd
				move /path/to/S16941 PROXY SERVER/Source/Main.class /path/to/S16941 PROXY SERVER/Binary/Main.class
				move /path/to/S16941 PROXY SERVER/Source/Request2.class /path/to/S16941 PROXY SERVER/Binary/Request2.class
				move /path/to/S16941 PROXY SERVER/Source/Proxy.class /path/to/S16941 PROXY SERVER/Binary/Proxy.class
				
		Via IntelliJ
			1. Go to "How to run?" > "WINDOWS 10" >> "IntelliJ"
			
			
			
	LINUX (Ubuntu Desktop)
		Via IntelliJ
			1. Go to "How to run?" > "LINUX" >> "IntelliJ"
			
		Via compile script
		1. Open terminal
			2. cd to /path/to/S16941 PROXY SERVER/
			3. Write in terminal:
				bash compile.sh
		
		Via terminal:
			1. Open terminal
			2. cd to /path/to/S16941 PROXY SERVER/
			3. Write in terminal:
				cd Source
				javac Main.java
				javac Proxy.java
				javac Request2.java
				mv Main.class ../Binary/Main.class
				mv Proxy.class ../Binary/Proxy.class
				mv Request2.class ../Binary/Request2.class
			
			
			
				 
		
How to run?

	WINDOWS 10
	
		Via commandline
			1. Turn on the cmd.
			2. cd to the folder in which is this file. (If you do not know what is cd command and how to use it go to https://ss64.com/nt/cd.html)
			3. Write in cmd:
				cd Binary
				java Main 								(You can specify port argument for example "java Main 8080", then proxy will work on 8080 port. Default port is 8085.) 
			4. Then go to Windows Setting >> Network >> Proxy 
			5. Scroll down to Manual Proxy setting and change to ON
			6. Then fill :
				- Adress: localhost
				- port: 8085 ( or different if you specified it in step 3)
			7. Go to web browser and check how it works!!!
	
		Via IntelliJ
			1. Turn on IntelliJ
			2. Click in top left corner File > Open 
			3. Choose /path/to/S16941 PROXY SERVER/IntelliJ Project
			4. Then in the right top corner click "play" button
			5. Then go to Windows Setting >> Network >> Proxy 
			6. Scroll down to Manual Proxy setting and change to ON
			7. Then fill :
				- Adress: localhost
				- port: 8085 
			8. Go to web browser and check how it works!!!
		
		Via run script:
			1. Go to folder in which is README (this) file.
			2. Double click on run.bat
			3. Then go to Windows Setting >> Network >> Proxy 
			4. Scroll down to Manual Proxy setting and change to ON
			5. Then fill :
				- Adress: localhost
				- port: 8085 
			6. Go to web browser and check how it works!!!
			
			
			
	LINUX (Ubuntu Desktop)
		Via commandline
			1. Turn on the terminal.
			2. cd to the folder in which is this file. (If you do not know what is cd command and how to use it go to https://www.computerhope.com/unix/ucd.htm)
			3. Write in terminal:
				cd Binary
				java Main 	(You can specify port argument for example "java Main 8080", then proxy will work on 8080 port. Default port is 8085.) 
			4. Then go to Setting >> Network >> Network Proxy >> click on cogwheel 
			5. Set to Manual Proxy setting 
			6. Then fill HTTP proxy :
				- Adress: localhost
				- port: 8085 ( or different if you specified it in step 3)
			7. Go to web browser and check how it works!!!
		Via IntelliJ
			1. Turn on IntelliJ
			2. Click in top left corner File > Open 
			3. Choose /path/to/S16941 PROXY SERVER/IntelliJ Project
			4. Then in the right top corner click "play" button
			5. Then go to Setting >> Network >> Network Proxy >> click on cogwheel 
			6. Set to Manual Proxy setting 
			7. Then fill HTTP proxy :
				- Adress: localhost
				- port: 8085 ( or different if you specified it in step 3)
			8. Go to web browser and check how it works!!!
		Via run script:
			1. Open terminal
			2. cd to /path/to/S16941 PROXY SERVER/
			3. Write in terminal:
				bash run.sh
			4. Then go to Setting >> Network >> Network Proxy >> click on cogwheel 
			5. Set to Manual Proxy setting 
			6. Then fill HTTP proxy :
				- Adress: localhost
				- port: 8085 ( or different if you specified it in step 3)
			7. Go to web browser and check how it works!!!



How to use?
	1.Run the program as in "How to run?"
	2.If you would like to stop proxy server just write "close" in the terminal and hit Enter.



What does not work?
		It is not supporting https. Every http page is working even with java script files or css files.
		
		If the html file on the webpage that we are proxying have a reference to a file which do not exist on the server (was deleted by webadmin but he/she forgot to remove reference to it from html file) program throws 
		an exception but it does not affect anything, proxy server is still working properly.
			
			
			
			